# The Template Method Pattern defines the skeleton of an algorithm in a base class but lets
#  subclasses override specific steps of the algorithm without modifying the structure.

# ðŸ“Œ Key Features of Template Method Pattern
# âœ… Encapsulates algorithm structure in a base class.
# âœ… Allows subclasses to override specific steps while keeping the core structure intact.
# âœ… Avoids duplicate code by reusing common logic.
# âœ… Follows the Open/Closed Principle â†’ The base class is open for extension but closed for modification.

# ðŸ“Œ Advantages
# âœ” Avoids duplicate code by reusing common logic in the base class.
# âœ” Easy to extend â†’ New processing methods can be added without modifying the existing logic.
# âœ” Maintains consistency â†’ All subclasses follow the same workflow structure.


from abc import ABC, abstractmethod

# Abstract Base Class (Template)
class DataProcessor(ABC):
    """Defines the template method for processing data"""

    def process(self):
        """Template method defining the workflow"""
        self.load_data()
        self.process_data()
        self.save_results()

    @abstractmethod
    def load_data(self):
        """Step 1: Load data (to be implemented by subclasses)"""
        pass

    @abstractmethod
    def process_data(self):
        """Step 2: Process data (to be implemented by subclasses)"""
        pass

    def save_results(self):
        """Step 3: Save results (common for all subclasses)"""
        print("ðŸ“‚ Results saved successfully!\n")

# Concrete Class: CSV Data Processing
class CSVProcessor(DataProcessor):
    def load_data(self):
        print("ðŸ“„ Loading data from CSV file...")

    def process_data(self):
        print("ðŸ”„ Processing CSV data...")

# Concrete Class: JSON Data Processing
class JSONProcessor(DataProcessor):
    def load_data(self):
        print("ðŸ“œ Loading data from JSON file...")

    def process_data(self):
        print("ðŸ”„ Processing JSON data...")

# Client Code
if __name__ == "__main__":
    print("ðŸŸ¢ Running CSV Data Processing:")
    csv_processor = CSVProcessor()
    csv_processor.process()

    print("ðŸŸ¢ Running JSON Data Processing:")
    json_processor = JSONProcessor()
    json_processor.process()
